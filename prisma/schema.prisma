generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?

  createdCommunities Community[]    @relation("CreatedBy")
  accounts           Account[]
  posts              Post[]
  comments           Comment[]
  commentVotes       CommentVote[]
  postVotes          PostVote[]
  subscriptions      Subscription[]
}

model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  posts     Post[]

  author   User   @relation("CreatedBy", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  subscribers Subscription[]

  @@index([authorId, name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@id([userId, communityId])
  @@index([communityId])
  @@index([userId])
}

enum VoteType {
  UP
  DOWN
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    Comment[]
  votes       PostVote[]

  @@index([communityId])
  @@index([authorId])
}

model PostVote {
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  type     VoteType

  @@id([authorId, postId])
  @@index([authorId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes CommentVote[]

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model CommentVote {
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  type VoteType

  @@id([authorId, commentId])
  @@index([commentId])
  @@index([authorId])
}
